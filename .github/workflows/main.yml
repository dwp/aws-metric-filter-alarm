name: Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Prepare-Version-Upgrade
        if: "contains(github.event.head_commit.message, 'Major Release') || contains(github.event.head_commit.message, 'Minor Release')"
        id: version
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          echo ::set-output name=latest_version_out::$LATEST_VERSION
          if [[ "${{ github.event.head_commit.message }}" == *"Major Release"* ]]; then
            echo ::set-output name=semver_increment::"m"
          elif [[ "${{ github.event.head_commit.message }}" == *"Minor Release"* ]]; then
            echo ::set-output name=semver_increment::"i"
          else 
            echo ::set-output name=semver_increment::"p"
          fi
      - name: Get publish version
        id: get-publish-version
        uses: matt-FFFFFF/simple-semver@v0.1.0
        with:
          semver-input: ${{ steps.version.outputs.latest_version_out }} 
          increment: ${{ steps.semver.outputs.semver_increment }}
        run: | 
          VERSION=$(echo ${{ steps.version.outputs.latest_version_out }}  | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo ${{ steps.version.outputs.semver_patch }} 
          echo "::set-output name=publish-version::${VERSION}"
          
  publish-github-release:
    runs-on: ubuntu-latest
    needs: [get-publish-version]
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false

