name: Master

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Release Type Check
        if: "contains(github.event.head_commit.message, 'Major Release') || contains(github.event.head_commit.message, 'Minor Release')"
        id: release-type-check
        run: |
          if [[ github.event.head_commit.message == *"Major Release"* ]]; then
            IS_MAJOR_RELEASE=true
          elif [[ github.event.head_commit.message == *"Minor Release"* ]]; then
            IS_MINOR_RELEASE=true
          fi
      - name: Get publish version
        id: get-publish-version
        run: echo $IS_MAJOR_RELEASE
             echo $IS_MINOR_RELEASE 
             | 
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          VERSION=$(echo $LATEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "::set-output name=publish-version::${VERSION}"
  publish-github-release:
    runs-on: ubuntu-latest
    needs: [get-publish-version]
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false

